{"version":3,"file":"static/js/973.d57831b1.chunk.js","mappings":"wMAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAqB,SAAAH,GAAK,OAAIA,EAAMI,OAAV,EAE1BC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EAEvBC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,E,mBCInBC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXV,GAAWW,EAAAA,EAAAA,IAAYb,GAsB7B,OACE,kBAAMc,SArBa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACTC,EAAaF,EAAKG,SAASC,KAAKC,MAChBpB,EAASqB,MAC7B,SAAAC,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBP,EAAWO,aAA9C,IAGPC,MAAM,UAAD,OAAWR,EAAX,4CAGPR,GACEiB,EAAAA,EAAAA,IAAW,CACTH,KAAMN,EACNU,OAAQZ,EAAKG,SAASS,OAAOP,SAGjCL,EAAKa,QACN,EAGC,WACE,4BACE,2BAAO,kBACP,kBACEC,KAAK,OACLN,KAAK,OAELO,MAAM,8DACNC,UAAQ,QAGZ,4BACA,2BAAO,mBACL,kBACEF,KAAK,MACLN,KAAK,SAELO,MAAM,8BACNC,UAAQ,QAGZ,mBAAQF,KAAK,SAAb,SAAsB,uBAG3B,E,UC/CYG,EAAe,WAC1B,IAAMhC,GAAWW,EAAAA,EAAAA,IAAYb,GAEvBmC,GADStB,EAAAA,EAAAA,IAAYT,GAAoBsB,cAClBA,cACvBU,EAAqBlC,EAASmC,QAAO,SAAAb,GAAO,OAChDA,EAAQC,KAAKC,cAAcY,SAASH,EADY,IAG5CxB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,uBAAG,wBACH,wBACGwB,EAAmBG,KAAI,SAAAf,GAAO,OAC7B,2BACI,yBAAG,SAAOA,EAAQC,KAAK,cAAYD,EAAQK,WAC7C,mBAAQW,QAAS,kBAAM7B,GAAS8B,EAAAA,EAAAA,IAAcjB,EAAQkB,IAArC,EAAjB,SAA4D,aAFrDlB,EAAQkB,GADY,QAWtC,E,UCxBKC,ECOc,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,CDPHG,GAEJC,EAAiB,WAC5B,IAAM1C,GAAWC,EAAAA,EAAAA,MACXyB,GAASxB,EAAAA,EAAAA,IAAYT,GAM3B,OACE,4BACE,kBAAOkD,QAASX,EAAhB,SAA0B,wCAC1B,kBACED,GAAIC,EACJZ,KAAK,OACLN,KAAK,SACLH,MAAOe,EACPkB,SAZe,SAAAxC,GACnBJ,GAAS6C,EAAAA,EAAAA,GAAUzC,EAAEG,OAAOI,OAC7B,MAcF,E,UEjCD,EAAuB,wBCWR,SAASmC,IACtB,IAAM9C,GAAWC,EAAAA,EAAAA,MACXL,GAAYM,EAAAA,EAAAA,IAAYP,GACxBG,GAAQI,EAAAA,EAAAA,IAAYL,GAK1B,OAJAkD,EAAAA,EAAAA,YAAU,WACR/C,GAASgD,EAAAA,EAAAA,MACV,GAAE,CAAChD,KAGF,iBAAKiD,UAAWC,EAAhB,WACE,uBAAG,mEACH,SAACnD,EAAD,KACA,uBAAG,gDACH,SAAC2C,EAAD,KACA,SAACnB,EAAD,IACC3B,IAAcE,IAAS,SAAC,IAAD,MAG7B,C","sources":["redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactsFilter/ContactsFilter.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/pages/Phonebook/Phonebook.module.css?1c37","pages/Phonebook/Phonebook.js"],"sourcesContent":["export const selectTasks = state => state.contacts.items;\n\nexport const selectStatusFilter = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\n// proptype:\nimport PropTypes from 'prop-types'\n// selector\nimport { selectTasks } from 'redux/contacts/selectors';\n// operation:\nimport { addContact } from 'redux/contacts/operations';\n// styles:\n// import css from './ContactsForm.module.css';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectTasks);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const inputValue = form.elements.text.value;\n    const contactExists = contacts.find(\n      contact => contact.name.toLowerCase() === inputValue.toLowerCase()\n    );\n    if (contactExists) {\n      alert(`Homie \"${inputValue}\" already exists in your contact list!`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: inputValue,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Type name:  </label>\n        <input\n          type=\"text\"\n          name=\"text\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n          required\n        />\n      </div>\n      <div>\n      <label>Add number:  </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits\"\n          required\n        />\n      </div>\n      <button type=\"submit\">make new contact</button>\n    </form>\n  );\n};\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// proptypes:\nimport PropTypes from 'prop-types';\n// operation:\nimport { deleteContact } from 'redux/contacts/operations';\n// selector:\nimport { selectTasks } from 'redux/contacts/selectors';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n// styles:\n// import css from './ContactsList.module.css';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectTasks);\n  const filter = useSelector(selectStatusFilter).toLowerCase();\n  const dataNormalize = filter.toLowerCase();\n  const normalizedContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(dataNormalize)\n  );\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Your contact list:</p>\n      <ul>\n        {normalizedContacts.map(contact => (\n          <li key={contact.id}>\n              <p>name: {contact.name} | number: {contact.number}</p>\n            <button onClick={() => dispatch(deleteContact(contact.id))}>\n              remove\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactsList;\n\n","import { useDispatch, useSelector } from 'react-redux';\n// proptypes:\nimport PropTypes from 'prop-types';\n// nanoid:\nimport { nanoid } from 'nanoid';\n// slice:\nimport { setFilter } from 'redux/contacts/filterSlice';\n// selector:\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n// styles:\n// import css from './ContactsFilter.module.css'\n\nconst filterId = nanoid();\n\nexport const ContactsFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <label htmlFor={filterId}>type name of person u lookin' for:</label>\n      <input\n        id={filterId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      ></input>\n    </div>\n  );\n};\n\nContactsFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { setFilter } from 'redux/filterSlice';\n\n// export const FilterContact = () => {\n//   const dispatch = useDispatch();\n//   const filter = useSelector((state) => state.filter);\n\n//   const handleChange = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n\n//   return (\n//     <label>\n//       type name of person u lookin' for:\n//       <input \n//         type=\"text\"\n//         value={filter}\n//         onChange={handleChange} \n//       />\n//     </label>\n//   );\n// };\n\n// FilterContact.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Phonebook_wrap__JZsW-\"};","import { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { ContactsList } from 'components/ContactsList';\nimport { ContactsFilter } from 'components/ContactsFilter';\n\nimport { Loader } from 'components/Loader/loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError } from 'redux/contacts/selectors';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.wrap}>\n      <p>Type data and click button to add a new contact to your list.</p>\n      <ContactsForm></ContactsForm>\n      <p>Can't find your contact? Type name below: </p>\n      <ContactsFilter></ContactsFilter>\n      <ContactsList />\n      {isLoading && !error && <Loader />}\n    </div>\n  );\n}\n"],"names":["selectTasks","state","contacts","items","selectStatusFilter","filters","selectIsLoading","isLoading","selectError","error","ContactsForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","inputValue","elements","text","value","find","contact","name","toLowerCase","alert","addContact","number","reset","type","title","required","ContactsList","dataNormalize","normalizedContacts","filter","includes","map","onClick","deleteContact","id","filterId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","ContactsFilter","htmlFor","onChange","setFilter","Phonebook","useEffect","fetchContacts","className","css"],"sourceRoot":""}